{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "weathersource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     calctime as integer (calctime)",
				"}",
				"source(output(",
				"          calctime as double,",
				"          city_id as boolean,",
				"          cnt as short,",
				"          cod as short,",
				"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
				"          message as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> weathersource",
				"weathersource foldDown(unroll(list),",
				"     mapColumn(",
				"          calctime,",
				"          city_id,",
				"          cnt,",
				"          cod,",
				"          message,",
				"          cloud_all = list.clouds.all,",
				"          timestamp = list.dt,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          snow_1h = list.snow.{1h},",
				"          rain_1h = list.rain.{1h},",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_gust = list.wind.gust,",
				"          wind_speed = list.wind.speed",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten2 derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
				"          location = toString('Boston')) ~> derivedColumn1",
				"derivedColumn1 filter(!isNull(temp) && !isNull(humidity) && length(toString(timestamp)) == 10) ~> filter1",
				"filter1 derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = location + '_' + toString(corrected_timestamp),",
				"          temp_c = round(temp - 273.15, 2),",
				"          temp_min_c = round(temp_min - 273.15, 2),",
				"          temp_max_c = round(temp_max - 273.15, 2),",
				"          feels_like_c = round(feels_like - 273.15, 2),",
				"          feels_like_f = round((feels_like - 273.15) * 9/5 + 32, 2),",
				"          temp_min_f = round((temp_min - 273.15) * 9/5 + 32, 2),",
				"          temp_max_f = round((temp_max - 273.15) * 9/5 + 32, 2),",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          weather_id_value = toInteger(split(toString(weather_id), ':')[1]),",
				"          weather_main_value = split(toString(weather_main), ':')[1],",
				"          weather_description_value = split(toString(weather_description), ':')[1],",
				"          weather_icon_value = split(toString(weather_icon), ':')[1],",
				"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(rain_1h))) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          cloud_all,",
				"          feels_like_k = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_k = temp,",
				"          temp_max_k = temp_max,",
				"          temp_min_k = temp_min,",
				"          snow_1h,",
				"          rain_1h,",
				"          wind_deg,",
				"          wind_gust,",
				"          wind_speed,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_c,",
				"          temp_min_c,",
				"          temp_max_c,",
				"          feels_like_c,",
				"          feels_like_f,",
				"          temp_min_f,",
				"          temp_max_f,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['weathersilverparquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}